target C {
    platform: {
        name: "rp2040",
        board: "pololu_3pi_2040_robot"
    },
    single-threaded: true,
    cmake-include: "../lib/RP2040/interrupt.cmake",
    files: "../lib/RP2040/interrupt.c"
}

import Logger, Sensor, ProcessUnbounded, Actuator from "../lib/libControl.lf"

preamble {=
    #include "/tmp/config.h"

    #include <stdio.h>
    #include "pico/stdlib.h"
    #include "hardware/uart.h"

    #define UART_ID uart0
    #define BAUD_RATE 115200
    #define DATA_BITS 8
    #define STOP_BITS 1
    #define PARITY    UART_PARITY_NONE

    // We are using pins 0 and 1, but see the GPIO function select table in the
    // datasheet for information on which other pins can be used.
    #define UART_TX_PIN 0
    #define UART_RX_PIN 1
=}

main reactor {
    preamble {=
        #include <stdarg.h>
    
        void out(char c, void *arg) {
            uart_putc(UART_ID, c);
        }
    
        int printf_custom(char *fmt, ...) {
            va_list va;
            va_start(va, fmt);
            int ret = vfctprintf(out, NULL, fmt, va);
            va_end(va);
            return ret;
        }
    =}

    logical action actuate: int

    log = new Logger(n_iterations = {= CONFIG_NITERATIONS =})

    sensor = new Sensor(n_iterations = {= CONFIG_NITERATIONS =})
    process = new ProcessUnbounded()
    actuator = new Actuator(n_iterations = {= CONFIG_NITERATIONS =})
    
    sensor.ts -> log.ts_sensor
    process.ts -> log.ts_process
    actuator.ts -> log.ts_actuator

    reaction(startup) {=
        // Set up our UART with the required speed.
        uart_init(UART_ID, BAUD_RATE);
        
        // Set the TX and RX pins by using the function select on the GPIO
        // Set datasheet for more information on function select
        gpio_set_function(UART_TX_PIN, GPIO_FUNC_UART);
        gpio_set_function(UART_RX_PIN, GPIO_FUNC_UART);

        void setup_interrupts(void);
        setup_interrupts();

        printf_custom("Startup\n");
    =}

    reaction(shutdown) {=
        void disable_interrupts(void);
        disable_interrupts();
        printf_custom("main shutdown\n");
    =}

    sensor.y -> process.x
    process.y -> actuator.x
}

