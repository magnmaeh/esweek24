target C {
    files: [
        "../lib/common.h",
        "../lib/lf_common.h"
    ]
}

preamble {=
    #include "lf_common.h"
    #include "/tmp/config.h"
=}

reactor Logger(n_iterations: int = 10) {
    input ts_sensor: instant_t
    input ts_process: instant_t
    input ts_actuator: instant_t

    state iteration: int = 0
    state ts: instant_t*

    reaction(startup) {=
        self->ts = malloc(3 * self->n_iterations * sizeof(instant_t));
    =}

    reaction(ts_sensor) {=
        self->ts[self->iteration++] = ts_sensor->value;
    =}

    reaction(ts_process) {=
        self->ts[self->iteration++] = ts_process->value;
    =}

    reaction(ts_actuator) {=
        self->ts[self->iteration++] = ts_actuator->value;
    =}

    reaction(shutdown) {=
        for (int i = 0; i < self->n_iterations; i++) {
            printout_log3(
                i, 
                self->ts[3 * i + 0],
                self->ts[3 * i + 1],
                self->ts[3 * i + 2]
            );
        }
        free(self->ts);
    =}
}

reactor Sensor(n_iterations: int = 10) {
    output y: int
    output ts: instant_t

    state it: int = 0
    timer t(50 msec, 10 msec)

    state data: uint16_t[] = {=
        {
#include "/tmp/normal.txt"
        };
    =}

    reaction(t) -> y, ts {=
        lf_set(y, self->data[self->it++]);
        lf_set(ts, lf_time_physical() - lf_time_logical());
    =}
}

reactor ProcessUnbounded {
    input x: int
    output y: int
    output ts: instant_t

    reaction(x) -> y, ts {=
        // "Process" for value time, this introduces jitter
        work_amount(x->value);

        lf_set(y, x->value);
        lf_set(ts, lf_time_physical() - lf_time_logical());
    =}
}

reactor Actuator(n_iterations: int = 10) {
    input x: int
    output ts: instant_t

    state it: int = 0

    reaction(x) -> ts {=
        lf_set(ts, lf_time_physical() - lf_time_logical());

        // Actuate with x
        if (++self->it == self->n_iterations) {
            lf_request_stop();
        }
    =}
}

reactor ControlCore {
    log = new Logger(n_iterations = {= CONFIG_NITERATIONS =})

    sensor = new Sensor(n_iterations = {= CONFIG_NITERATIONS =})
    process = new ProcessUnbounded()
    actuator = new Actuator(n_iterations = {= CONFIG_NITERATIONS =})

    sensor.ts -> log.ts_sensor
    process.ts -> log.ts_process
    actuator.ts -> log.ts_actuator

    sensor.y -> process.x
    process.y -> actuator.x

    reaction(startup) {=
        configure_pins();
        send_sync();
    =}

    reaction(shutdown) {=
        shutdown();
    =}
}

reactor ControlCoreDelayed {
    log = new Logger(n_iterations = {= CONFIG_NITERATIONS =})

    sensor = new Sensor(n_iterations = {= CONFIG_NITERATIONS =})
    process = new ProcessUnbounded()
    actuator = new Actuator(n_iterations = {= CONFIG_NITERATIONS =})

    sensor.ts -> log.ts_sensor
    process.ts -> log.ts_process
    actuator.ts -> log.ts_actuator

    sensor.y -> process.x
    process.y -> actuator.x after 5 msec

    reaction(startup) {=
        configure_pins();
        send_sync();
    =}

    reaction(shutdown) {=
        shutdown();
    =}
}
