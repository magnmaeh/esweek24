/**
 * To build without threading, change build to "../../build_FlexPRET.sh" and
 * threading to false. This will give a sequential execution of the reactors.
 *
 * Also, there is a very hacky way to print out the results in the end of the
 * program. This comes from the fact that FlexPRET has hardware isolation of
 * periperals (i.e., only hardware thread 0 has access to the UART). The solution
 * is to print everything after the LF program is done. This is done by replacing
 * some of the autogenerated LF code. Locate the section in the 
 * src-gen/FlexPRET_Parallel/FlexPRET_Parallel.c file and replace it with the
 * code below.
 * 

```
int lf_reactor_c_main(int argc, const char* argv[]);
int main(int argc, const char* argv[]) {   
    return lf_reactor_c_main(argc, argv);
}
```

```
#include "lf_common.h"
int lf_reactor_c_main(int argc, const char* argv[]);
int main(int argc, const char* argv[]) {
    int ret = lf_reactor_c_main(argc, argv);

#include "/tmp/config.h"
    struct Sample {
        instant_t before;
        instant_t after;
        int bank_idx;
    };
    extern struct Sample *samples[3];
    for (int i = 0; i < CONFIG_NITERATIONS; i++) {
        for (int bid = 0; bid < 3; bid++) {
            struct Sample s = samples[bid][i];
            printout_log2(
                i, bid,
                s.before,
                s.after
            );
        }
    }

    for (int i = 0; i < 3; i++) {
        free(samples[i]);
    }

    return ret;
}
```
*/

target C {
    build: "../../build_FlexPRET_threaded.sh",
    threading: true, // We use lfc 4.1, which supports this
    files: [
        "../../lib/common.h",
        "../../lib/lf_common.h"
    ]
}

preamble {=
    #include "lf_common.h"
    #include "/tmp/config.h"
=}

reactor Process(n_iterations: int = 10, bank_index: int = 0) {
    timer t(50 msec, 10 msec)
    state it: int = 0

    preamble {=
        struct Sample {
            instant_t before;
            instant_t after;
            int bank_idx;
        };
        struct Sample *samples[3];
    =}

    reaction(startup) {=
        for (int i = 0; i < 3; i++) {
            samples[i] = malloc(self->n_iterations * sizeof(struct Sample));
        }
    =}

    reaction(t) {=
        instant_t ts_before = lf_time_physical() - lf_time_logical();
        work_amount(1000);
        instant_t ts_after = lf_time_physical() - lf_time_logical();

        samples[self->bank_index][self->it] = (struct Sample) {
            .before   = ts_before,
            .after    = ts_after,
            .bank_idx = self->bank_index
        };

        if (++self->it == self->n_iterations) {
            lf_request_stop();
        }
    =}
}

main reactor {
    computes = new[3] Process(n_iterations = {= CONFIG_NITERATIONS =})
}
